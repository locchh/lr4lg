# Generated from CodeGen.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,7,79,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,
        6,7,6,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,
        0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,4,1,4,5,4,59,8,4,10,
        4,12,4,62,9,4,1,5,1,5,5,5,66,8,5,10,5,12,5,69,9,5,1,5,1,5,1,6,4,
        6,74,8,6,11,6,12,6,75,1,6,1,6,0,0,7,1,1,3,2,5,3,7,4,9,5,11,6,13,
        7,1,0,4,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,1,0,
        34,34,3,0,9,10,13,13,32,32,81,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,
        0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,1,15,1,0,0,0,
        3,33,1,0,0,0,5,49,1,0,0,0,7,54,1,0,0,0,9,56,1,0,0,0,11,63,1,0,0,
        0,13,73,1,0,0,0,15,16,5,67,0,0,16,17,5,114,0,0,17,18,5,101,0,0,18,
        19,5,97,0,0,19,20,5,116,0,0,20,21,5,101,0,0,21,22,5,32,0,0,22,23,
        5,97,0,0,23,24,5,32,0,0,24,25,5,102,0,0,25,26,5,117,0,0,26,27,5,
        110,0,0,27,28,5,99,0,0,28,29,5,116,0,0,29,30,5,105,0,0,30,31,5,111,
        0,0,31,32,5,110,0,0,32,2,1,0,0,0,33,34,5,119,0,0,34,35,5,105,0,0,
        35,36,5,116,0,0,36,37,5,104,0,0,37,38,5,32,0,0,38,39,5,112,0,0,39,
        40,5,97,0,0,40,41,5,114,0,0,41,42,5,97,0,0,42,43,5,109,0,0,43,44,
        5,101,0,0,44,45,5,116,0,0,45,46,5,101,0,0,46,47,5,114,0,0,47,48,
        5,115,0,0,48,4,1,0,0,0,49,50,5,116,0,0,50,51,5,104,0,0,51,52,5,97,
        0,0,52,53,5,116,0,0,53,6,1,0,0,0,54,55,5,44,0,0,55,8,1,0,0,0,56,
        60,7,0,0,0,57,59,7,1,0,0,58,57,1,0,0,0,59,62,1,0,0,0,60,58,1,0,0,
        0,60,61,1,0,0,0,61,10,1,0,0,0,62,60,1,0,0,0,63,67,5,34,0,0,64,66,
        8,2,0,0,65,64,1,0,0,0,66,69,1,0,0,0,67,65,1,0,0,0,67,68,1,0,0,0,
        68,70,1,0,0,0,69,67,1,0,0,0,70,71,5,34,0,0,71,12,1,0,0,0,72,74,7,
        3,0,0,73,72,1,0,0,0,74,75,1,0,0,0,75,73,1,0,0,0,75,76,1,0,0,0,76,
        77,1,0,0,0,77,78,6,6,0,0,78,14,1,0,0,0,4,0,60,67,75,1,6,0,0
    ]

class CodeGenLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    ID = 5
    STRING = 6
    WS = 7

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'Create a function'", "'with parameters'", "'that'", "','" ]

    symbolicNames = [ "<INVALID>",
            "ID", "STRING", "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "ID", "STRING", "WS" ]

    grammarFileName = "CodeGen.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


